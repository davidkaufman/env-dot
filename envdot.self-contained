#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Env/Dot.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ENV_DOT';
  ## no critic (ValuesAndExpressions::ProhibitConstantPragma)
  package Env::Dot;
  use strict;
  use warnings;
  
  # We define our own import routine because
  # this is the point (when use Env::Dot is called)
  # when we do our magic.
  
  {
      no warnings 'redefine'; ## no critic [TestingAndDebugging::ProhibitNoWarnings]
      sub import {
          load_vars();
          return;
      }
  }
  
  use English qw( -no_match_vars ); # Avoids regex performance penalty in perl 5.18 and earlier
  use Carp;
  
  # ABSTRACT: Read environment variables from .env file
  
  # VERSION: generated by DZP::OurPkgVersion
  
  use Env::Dot::Functions qw( get_dotenv_vars interpret_dotenv_filepath_var );
  
  use constant  {
      OPTION_FILE_TYPE => q{file:type},
      OPTION_FILE_TYPE_PLAIN => q{plain},
      OPTION_FILE_TYPE_SHELL => q{shell},
      DEFAULT_OPTION_FILE_TYPE => q{shell},
      DEFAULT_DOTENV_FILEPATH => q{.env},
      INDENT => q{    },
  };
  
  =pod
  
  =begin stopwords
  
  dotenv env envdot
  
  =end stopwords
  
  =head1 STATUS
  
  Package L<Env::Dot> is currently being developed so changes in the API are possible,
  though not likely.
  
  
  =head1 SYNOPSIS
  
      use Env::Dot;
  
      print $ENV{'VAR_DEFINED_IN_DOTENV_FILE'};
  
  =head1 DESCRIPTION
  
  More flexibility in how you manage and use your F<.env> file.
  
  Features:
  
  =over 8
  
  =item If no B<.env> file is present, then do nothing
  
  By default, Env::Dot will do nothing if there is no
  B<.env> file.
  You can also configure Env::Dot to emit an alarm
  or break execution, if you want.
  
  =item Specify the other dotenv files with path
  
  If your B<.env> file is located in another path,
  not the current working directory,
  you can use the environment variable
  B<DOTENV_FILEPATHS> to tell where your dotenv file is located.
  You can specify several file paths; just separate
  them by B<:>. Dot::Env will load all the files in the order
  you specify them.
  
  =item Support different types of .env files
  
  Unix Shell I<source> command compatible dotenv files use quotation marks
  (B<">) to define a variable which has spaces. But, for instance,
  Docker compatible F<.env> files do not use quotation marks. The variable
  content begins with B<=> sign and ends with linefeed.
  
  You can specify in the dotenv file itself - by using meta commands -
  which type of file it is.
  
  =item Use executable B<envdot> to bring the variables into your shell
  
  The executable is distributed together with Dot::Env package in directory I<script>.
  
      eval "$(envdot)"
  
  =back
  
  =head1 DEPENDENCIES
  
  No external dependencies outside Perl's standard distribution.
  
  =head1 FUNCTIONS
  
  No functions are automatically exported to the calling namespace.
  
  =head2 load_vars
  
  Load variables from F<.env> file or files in environment variable
  B<ENVDOT_FILEPATHS>.
  
  =cut
  
  sub load_vars {
      my $dotenv_filepath_var = q{ENVDOT_FILEPATHS};
      my @dotenv_filepaths;
      if( exists $ENV{ $dotenv_filepath_var } ) {
          @dotenv_filepaths = interpret_dotenv_filepath_var( $ENV{ $dotenv_filepath_var } );
      } else {
          if( -f DEFAULT_DOTENV_FILEPATH ) {
              @dotenv_filepaths = ( DEFAULT_DOTENV_FILEPATH ); # The CLI parameter
          }
      }
  
      my %vars = get_dotenv_vars( @dotenv_filepaths );
      my %new_env;
      foreach my $var_name ( sort keys %vars ) {
  
          ### no critic [Variables::RequireLocalizedPunctuationVars]
          $new_env{ $var_name } = $vars{$var_name};
      }
      foreach my $var_name ( sort keys %ENV ) {
          $new_env{ $var_name } = $vars{$var_name};
      }
      ## no critic [Variables::RequireLocalizedPunctuationVars]
      %ENV = %new_env;
      return \%ENV;
  }
  
  1;
  
  __END__
  
  =head1 SEE ALSO
  
  L<Env::Assert> will verify that you certainly have those environmental
  variables you need. It also has an executable which can perform the check
  in the beginning of a B<docker> container run.
  
  L<Dotenv> is another package which implements functionality to use
  F<.env> files in Perl.
  
  =cut
ENV_DOT

$fatpacked{"Env/Dot/Functions.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ENV_DOT_FUNCTIONS';
  ## no critic (ValuesAndExpressions::ProhibitConstantPragma)
  package Env::Dot::Functions;
  use strict;
  use warnings;
  use Data::Dumper;
  
  use Exporter 'import';
  our @EXPORT_OK = qw(
      get_dotenv_vars
      interpret_dotenv_filepath_var
      );
  our %EXPORT_TAGS = (
      'all'          => [qw( get_dotenv_vars interpret_dotenv_filepath_var )],
  );
  
  use English qw( -no_match_vars ); # Avoids regex performance penalty in perl 5.18 and earlier
  use Carp;
  
  # ABSTRACT: Read environment variables from .env file
  
  # VERSION: generated by DZP::OurPkgVersion
  
  use constant  {
      OPTION_FILE_TYPE => q{file:type},
      OPTION_FILE_TYPE_PLAIN => q{plain},
      OPTION_FILE_TYPE_SHELL => q{shell},
      DEFAULT_OPTION_FILE_TYPE => q{shell},
  };
  
  =pod
  
  =for stopwords envdot env
  
  =head1 STATUS
  
  Package L<Env::Dot> is currently being developed so changes in the API are possible,
  though not likely.
  
  
  =head1 SYNOPSIS
  
      use Env::Dot::Functions qw( get_dotenv_vars interpret_dotenv_filepath_var );
  
  =head1 DESCRIPTION
  
  This package just contains functions for use
  in the main package L<Env::Dot> and in
  the command line tool B<envdot>.
  
  =head1 FUNCTIONS
  
  No functions are automatically exported to the calling namespace.
  
  =head2 get_dotenv_vars()
  
  Return all variables from the F<.env> file
  as a hash (name/value pairs).
  
  =cut
  
  sub get_dotenv_vars {
      my @dotenv_filepaths = @_;
  
      my %vars;
      foreach my $filepath (@dotenv_filepaths) {
          if( -f $filepath ) {
              my @rows = _read_dotenv_file( $filepath );
              my %tmp = _interpret_dotenv( @rows );
              @vars{ keys %tmp } = @tmp{ keys %tmp };
          } else {
              carp "No file found: '$filepath'";
          }
      }
      return %vars;
  }
  
  =head2 interpret_dotenv_filepath_var( $filepaths )
  
  Return a list of file paths.
  
  =cut
  
  sub interpret_dotenv_filepath_var { ## no critic (Subroutines::RequireArgUnpacking)
      return split qr{:}msx, $_[0];
  }
  
  # Private subroutines
  
  sub _interpret_dotenv {
      my (@rows) = @_;
      my %options = (
          'file:type' => DEFAULT_OPTION_FILE_TYPE,
      ); # Options related to reading the file. Applied as they are read.
      my %vars;
      foreach (@rows) {
          ## no critic (ControlStructures::ProhibitCascadingIfElse)
          ## no critic (RegularExpressions::ProhibitComplexRegexes)
          if(
              # This is envdot meta command
              m{
              ^ [[:space:]]{0,} [#]{1}
              [[:space:]]{1,} envdot [[:space:]]{1,}
              [(] (?<opts> [^)]{0,}) [)]
              [[:space:]]{0,} $
              }msx
          ) {
              my $opts = _interpret_opts( $LAST_PAREN_MATCH{opts} );
              foreach ( keys %{ $opts } ) {
                  $options{$_} = $opts->{$_};
              }
          } elsif(
              # This is comment row
              m{
                  ^ [[:space:]]{0,} [#]{1} .* $
              }msx
          ) {
              1;
          } elsif(
              # This is empty row
              m{
                  ^ [[:space:]]{0,} $
              }msx
          ) {
              1;
          } elsif(
              # This is env var description
              m{
                  ^ (?<name> [^=]{1,}) = (?<value> .*) $
              }msx
          ) {
              my ($name, $value) = ( $LAST_PAREN_MATCH{name}, $LAST_PAREN_MATCH{value} );
              if( $options{ 'file:type' } eq OPTION_FILE_TYPE_SHELL ) {
                  if($value =~ m{
                      ^['"]{1} (?<value> .*) ["']{1}  # Get value from between quotes
                      (?: [;] [[:space:]]{0,} export [[:space:]]{1,} $name)?  # optional
                      [[:space:]]{0,} $  # optional whitespace at the end
                  }msx) {
                      ($value) = $LAST_PAREN_MATCH{value};
                  }
              } elsif( $options{ 'file:type' } eq OPTION_FILE_TYPE_PLAIN ) {
                  1;
              }
              $vars{ $name } = $value;
          } else {
              carp "Uninterpretable row: $_";
          }
      }
      return %vars;
  }
  
  sub _interpret_opts {
      my ($opts_str) = @_;
      my @opts = split qr{
          [[:space:]]{0,} [,] [[:space:]]{0,}
          }msx,
      $opts_str;
      my %opts;
      foreach (@opts) {
          my ($key, $val) = split qr/=/msx;
          $opts{$key} = $val;
      }
      return \%opts;
  }
  
  sub _read_dotenv_file {
      my ($filepath) = @_;
      open my $fh, q{<}, $filepath or croak "Cannot open file '$filepath'";
      my @dotenv_rows;
      while( <$fh> ) { chomp; push @dotenv_rows, $_; }
      close $fh or croak "Cannot close file '$filepath'";
      return @dotenv_rows;
  }
  
  1;
ENV_DOT_FUNCTIONS

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

## no critic (ControlStructures::ProhibitPostfixControls)
## no critic (ValuesAndExpressions::ProhibitConstantPragma)
use strict;
use warnings;
use open ':std', IO => ':encoding(UTF-8)';

# ABSTRACT: Read .env file and turn its content into environment variables for different shells.

# PODNAME: envdot

# VERSION: generated by DZP::OurPkgVersion

use English qw( -no_match_vars ); # Avoids regex performance penalty in perl 5.18 and earlier
use Getopt::Long;
use Carp;
use Pod::Usage;

use Env::Dot::Functions qw( get_dotenv_vars interpret_dotenv_filepath_var );

local $OUTPUT_AUTOFLUSH = 1;

use constant {
    DEFAULT_OPTION_DOTENV_FILENAME => '.env',
    DEFAULT_OPTION_SHELL => q{sh},
};

my $help = 0;
my $man = 0;
my $export = 1;
my $shell = DEFAULT_OPTION_SHELL;
my $dotenv_filepath = DEFAULT_OPTION_DOTENV_FILENAME;
GetOptions(
    'help|?'     => \$help,
    'man'        => \$man,
    'export!'    => \$export,
    'shell|s=s'  => \$shell,
    'dotenv|e=s' => \$dotenv_filepath,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

sub main {

    my $dotenv_filepath_var = q{DOTENV_FILEPATHS};
    my @dotenv_filepaths;
    if( exists $ENV{ $dotenv_filepath_var } ) {
        @dotenv_filepaths = interpret_dotenv_filepath_var( $ENV{ $dotenv_filepath_var } );
    } else {
        if( ! -f $dotenv_filepath ) {
            carp "No file found: '$dotenv_filepath'";
            return 1;
        }
        @dotenv_filepaths = ( $dotenv_filepath ); # The CLI parameter
    }

    my %vars = get_dotenv_vars( @dotenv_filepaths );

    print {*STDOUT} convert_variables_into_commands( %vars )
        or croak 'Cannot print variables to STDOUT';

    return 0;
}

=head2 convert_variables_into_commands( \%vars, $shell )

Convert variables for different shells: sh, csh, fish

Return a string.

=cut

sub convert_variables_into_commands {
    my ( %vars ) = @_;
    my $out = q{};
    foreach my $var_name ( sort keys %vars ) {
        my $var_value = $vars{$var_name};
        $out .= convert_variable( $var_name, $var_value );
    }
    return $out;
}

=head2 convert_variable( $name, $value )

Print one environmental variable definition according
to the wanted shell.

Return a string.

=cut

sub convert_variable {
    my ( $name, $value ) = @_;
    my $line;
    if( $shell eq q{sh} ) {
        if( $export ) {
            $line = sprintf "%s='%s'; export %s\n", $name, $value, $name;
        } else {
            $line = sprintf "%s='%s'\n", $name, $value;
        }
    } elsif( $shell eq q{csh} ) {
        if( $export ) {
            $line = sprintf "setenv %s '%s'\n", $name, $value;
        } else {
            $line = sprintf "set %s '%s'\n", $name, $value;
        }
    } elsif( $shell eq q{fish} ) {
        $line = sprintf "set -e %s; set -x -U %s '%s'\n", $name, $name, $value;
    } else {
        croak "Unknown shell: $shell";
    }
    return $line;
}

exit main(@ARGV);

__END__

=head1 envdot

Read .env file and turn its content into environment variables for different shells.



=head1 SYNOPSIS

envdot [options]

    eval `envdot`

Options:
    --help
    --man
    --export --no-export
    --shell -s
    --dotenv -e

=head2 CLI interface without dependencies

The F<envdot> command is also available
as a self contained executable.
You can download it and run it as it is without
additional installation of CPAN packages.
Of course, you still need Perl, but Perl comes with any
normal Linux installation.

This can be convenient if you want to, for instance,
include F<envdot> in a docker container build.

    curl -LSs -o envdot https://raw.githubusercontent.com/mikkoi/env-dot/master/script/envdot.packed
    chmod +x ./envdot


=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--export>, B<--no-export>

Write commands to set variables for local shell or for exporting them.
You usually want to export the variables
to all subsequent programs and subshells, i.e.
make them into I<environment variables>.

Default: export

=item B<-s>, B<--shell>

Which shell (family) are you using? Supported: sh, csh, fish.

Default: sh

=item B<-e>, B<--dotenv>

Path to F<.env> file.

Default: current directory F<.env>

=back

=head1 DESCRIPTION

B<envdot> reads your F<.env> file and converts it
into environment variable commands suitable for
different shells (shell families): B<sh>, B<csh> and B<fish>.

F<.env> files can be written in different flavors.
B<envdot> supports the often used B<sh> compatible flavor and
the B<docker> flavor which are not compatible with each other.

If you have several F<.env> files, you can read them in at one go
with the help of the environment variable B<ENVDOT_FILEPATHS>.
Separate the full paths with B<:> character.

If you have set the variable DOTENV_FILEPATH, then B<envdot> will use that.
Otherwise, it respects the command line parameter.
If no parameter, then default value is used. Default is the file
F<.env> in the current directory.

=head1 EXAMPLES

    eval `envdot --no-export --shell csh`

    eval `envdot --dotenv subdir/.env`

    ENVDOT_FILEPATHS='../.env:subdir/.env:.env' eval `envdot`


=head1 DEPENDENCIES

No external dependencies outside Perl's standard distribution.

=head1 SEE ALSO

L<Env::Assert> will verify that you certainly have those environmental
variables you need. It also has an executable which can perform the check
in the beginning of a B<docker> container run.

L<Dotenv> is another package which implements functionality to use
F<.env> files in Perl.

=cut
